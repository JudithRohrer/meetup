{"ast":null,"code":"import { mockEvents } from './mock-events';\nimport axios from 'axios';\n\nasync function getAccessToken() {\n  const accessToken = localStorage.getItem('access_token');\n\n  if (!accessToken) {\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = searchParams.get('code');\n\n    if (!code) {\n      window.location.href = 'https://secure.meetup.com/oauth2/authorize?client_id=unmfj4cn58bom36ulhs1r8ea8c&response_type=code&redirect_uri=https://judithrohrer.github.io/meetup/';\n      return null;\n    }\n\n    return getOrRenewAccessToken('get', code);\n  }\n\n  const lastSavedTime = localStorage.getItem('last_saved_time');\n\n  if (accessToken && Date.now() - lastSavedTime < 3600000) {\n    return accessToken;\n  }\n\n  const refreshToken = localStorage.getItem('refresh_token');\n  return getOrRenewAccessToken('renew', refreshToken);\n}\n\n;\n\nasync function getOrRenewAccessToken(type, key) {\n  let url;\n\n  if (type === 'get') {\n    url = 'https://87m48swsbc.execute-api.eu-central-1.amazonaws.com/dev/api/token/' + key;\n  } else if (type === 'renew') {\n    url = 'https://87m48swsbc.execute-api.eu-central-1.amazonaws.com/dev/api/refresh_token/' + key;\n  } // use axios to make a GET request to the endpoint\n\n\n  const tokenInfo = await axios.get(url); //Save tokens to localStorage together with a timestamp\n\n  localStorage.setItem('access_token', tokenInfo.data.access_token);\n  localStorage.setItem('refresh_token', tokenInfo.data.refresh_token);\n  localStorage.setItem('last_saved_time', Date.now()); //Return the access_token\n\n  return tokenInfo.data.access_token;\n}\n\nasync function getSuggestions(query) {\n  if (window.location.href.startsWith('https://localhost')) {\n    return [{\n      city: 'Munich',\n      country: 'de',\n      localized_country_name: 'Germany',\n      name_string: 'Munich, Germany',\n      zip: 'meetup3',\n      lat: 48.14,\n      lon: 11.58\n    }, {\n      city: 'Munich',\n      country: 'us',\n      localized_country_name: 'USA',\n      state: 'ND',\n      name_string: 'Munich, North Dakota, USA',\n      zip: '58352',\n      lat: 48.66,\n      lon: -98.85\n    }];\n  }\n\n  const token = await getAccessToken();\n\n  if (token) {\n    const url = 'https://api.meetup.com/find/locations?&sign=true&photo-host=public&query=' + query + '&access_token=' + token;\n    const result = await axios.get(url);\n    return result.data;\n  }\n\n  return [];\n}\n\nasync function getEvents(lat, lon, token) {\n  if (window.location.href.startsWith('https://localhost')) {\n    return mockEvents.events;\n  }\n\n  if (token) {\n    let url = 'https://api.meetup.com/find/upcoming_events?&sign=true&photo-host=public' + '&access_token=' + token;\n\n    if (lat && lon) {\n      url += '&lat=' + lat + '&lon=' + lon;\n    }\n\n    const result = await axios.get(url);\n    return result.data.events;\n  }\n}\n\nexport { getSuggestions, getEvents };","map":{"version":3,"sources":["/Users/judithrohrer/Desktop/meetup/src/api.js"],"names":["mockEvents","axios","getAccessToken","accessToken","localStorage","getItem","searchParams","URLSearchParams","window","location","search","code","get","href","getOrRenewAccessToken","lastSavedTime","Date","now","refreshToken","type","key","url","tokenInfo","setItem","data","access_token","refresh_token","getSuggestions","query","startsWith","city","country","localized_country_name","name_string","zip","lat","lon","state","token","result","getEvents","events"],"mappings":"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","sourcesContent":["import {Â mockEvents } from './mock-events';\nimport axios from 'axios';\n\nasync function getAccessToken () {\nconst accessToken = localStorage.getItem('access_token');\n\n  if (!accessToken) {\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = searchParams.get('code');\n\n    if (!code) {\n      window.location.href = 'https://secure.meetup.com/oauth2/authorize?client_id=unmfj4cn58bom36ulhs1r8ea8c&response_type=code&redirect_uri=https://judithrohrer.github.io/meetup/';\n      return null;\n    }\n    return getOrRenewAccessToken('get', code);\n  }\n\n  const lastSavedTime = localStorage.getItem('last_saved_time');\n  if (accessToken && (Date.now() - lastSavedTime < 3600000)) {\n    return accessToken;\n  }\n\n  const refreshToken = localStorage.getItem('refresh_token');\n  return getOrRenewAccessToken('renew', refreshToken);\n};\n\nasync function getOrRenewAccessToken(type, key) {\n  let url;\n  if (type === 'get') {\n    url = 'https://87m48swsbc.execute-api.eu-central-1.amazonaws.com/dev/api/token/' + key;\n  } else if (type === 'renew') {\n    url = 'https://87m48swsbc.execute-api.eu-central-1.amazonaws.com/dev/api/refresh_token/' + key;\n  }\n\n  // use axios to make a GET request to the endpoint\n  const tokenInfo = await axios.get(url);\n\n  //Save tokens to localStorage together with a timestamp\n  localStorage.setItem('access_token', tokenInfo.data.access_token);\n  localStorage.setItem('refresh_token', tokenInfo.data.refresh_token);\n  localStorage.setItem('last_saved_time', Date.now());\n\n  //Return the access_token\n  return tokenInfo.data.access_token;\n}\n\nasync function getSuggestions(query) {\n  if (window.location.href.startsWith('https://localhost')) {\n    return [\n      {\n        city: 'Munich',\n        country: 'de',\n        localized_country_name: 'Germany',\n        name_string: 'Munich, Germany',\n        zip: 'meetup3',\n        lat: 48.14,\n        lon: 11.58\n      },\n      {\n        city: 'Munich',\n        country: 'us',\n        localized_country_name: 'USA',\n        state: 'ND',\n        name_string: 'Munich, North Dakota, USA',\n        zip: '58352',\n        lat: 48.66,\n        lon: -98.85\n      }\n    ];\n  }\n\n  const token = await getAccessToken();\n  if (token) {\n    const url = 'https://api.meetup.com/find/locations?&sign=true&photo-host=public&query=' + query + '&access_token=' + token;\n    const result = await axios.get(url);\n    return result.data;\n  }\n  return [];\n}\n\nasync function getEvents(lat, lon, token) {\n  if (window.location.href.startsWith('https://localhost')) {\n    return mockEvents.events;\n}\n  if (token) {\n    let url = 'https://api.meetup.com/find/upcoming_events?&sign=true&photo-host=public' + '&access_token=' + token;\n    if (lat && lon) {\n      url += '&lat=' + lat + '&lon=' + lon;\n    }\n    const result = await axios.get(url);\n    return result.data.events;\n  }\n}\n\nexport { getSuggestions, getEvents };\n"]},"metadata":{},"sourceType":"module"}